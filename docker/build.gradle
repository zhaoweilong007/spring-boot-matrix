plugins {
    id 'com.google.cloud.tools.jib' version '3.2.1'
}


ext {
    //阿里云仓库地址
    set('registryUrl', "registry.cn-hangzhou.aliyuncs.com")
    //阿里云仓库名
    set('registryNamespace', "my_docker_dev")
    //阿里云仓库用户名及密码
    set('registryUsername', "冬天从不穿秋裤")
    set('registryPassword', "*******")
}
//写法一，读取全局的gradle.properties配置或者通过命令行参数-Pdocker_repo_username= 传递
def dockerUserName = project.properties['docker_repo_username']
def dockerPassWord = project.properties['docker_repo_password']

if (dockerUserName == null) {
    dockerUserName = "username"
}
if (dockerPassWord == null) {
    dockerPassWord = "password"
}

//写法二，通过命令行参数-Pdocker_repo_username= 传递
//def dockerUserName = project.findProperty('docker_repo_username')
//def dockerPassWord = project.findProperty("docker_repo_password")

// 使用jib插件自动构建镜像并上传到阿里云
jib {
    from {
        image = "adoptopenjdk/openjdk11:latest"
    }

    //推送的目标镜像仓库地址
    to {
        image = "${registryUrl}/${registryNamespace}/${project.name}"
        //镜像tag
        tags = ["latest", "${project.version}".toString()]
        //身份认证信息
        auth {
            username = dockerUserName
            password = dockerPassWord
        }
    }
    //镜像容器的配置信息
    container {
        /**
         * 设置jvm的启动参数
         * user.timezone - 解决Java程序的时区问题
         */
        jvmFlags = ['-Duser.timezone=Asia/Shanghai']
        mainClass = "com.zwl.springbootdocker.SpringbootDockerApplication"
        ports = ['8888']
    }
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

//打印docker 配置
task("dockerConfig") {
    doLast {
        println dockerUserName
        println dockerPassWord
    }
}